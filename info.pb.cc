// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pubsub {

namespace {

const ::google::protobuf::Descriptor* SystemQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_info_2eproto() {
  protobuf_AddDesc_info_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "info.proto");
  GOOGLE_CHECK(file != NULL);
  SystemQuery_descriptor_ = file->message_type(0);
  static const int SystemQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemQuery, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemQuery, topic_),
  };
  SystemQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemQuery_descriptor_,
      SystemQuery::default_instance_,
      SystemQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemQuery));
  SystemAns_descriptor_ = file->message_type(1);
  static const int SystemAns_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemAns, content_),
  };
  SystemAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemAns_descriptor_,
      SystemAns::default_instance_,
      SystemAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemAns));
  RoomInfo_descriptor_ = file->message_type(2);
  static const int RoomInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, createdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, rival_),
  };
  RoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomInfo_descriptor_,
      RoomInfo::default_instance_,
      RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInfo));
  ShowInfo_descriptor_ = file->message_type(3);
  static const int ShowInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowInfo, ri_),
  };
  ShowInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowInfo_descriptor_,
      ShowInfo::default_instance_,
      ShowInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowInfo));
  Pos_descriptor_ = file->message_type(4);
  static const int Pos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, y_),
  };
  Pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pos_descriptor_,
      Pos::default_instance_,
      Pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pos));
  GridInfo_descriptor_ = file->message_type(5);
  static const int GridInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridInfo, o_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridInfo, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridInfo, grid_),
  };
  GridInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridInfo_descriptor_,
      GridInfo::default_instance_,
      GridInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_info_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemQuery_descriptor_, &SystemQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemAns_descriptor_, &SystemAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInfo_descriptor_, &RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowInfo_descriptor_, &ShowInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pos_descriptor_, &Pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridInfo_descriptor_, &GridInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_info_2eproto() {
  delete SystemQuery::default_instance_;
  delete SystemQuery_reflection_;
  delete SystemAns::default_instance_;
  delete SystemAns_reflection_;
  delete RoomInfo::default_instance_;
  delete RoomInfo_reflection_;
  delete ShowInfo::default_instance_;
  delete ShowInfo_reflection_;
  delete Pos::default_instance_;
  delete Pos_reflection_;
  delete GridInfo::default_instance_;
  delete GridInfo_reflection_;
}

void protobuf_AddDesc_info_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ninfo.proto\022\006pubsub\")\n\013SystemQuery\022\013\n\003c"
    "md\030\002 \002(\t\022\r\n\005topic\030\003 \001(\t\"\034\n\tSystemAns\022\017\n\007"
    "content\030\002 \002(\t\"K\n\010RoomInfo\022\014\n\004name\030\001 \002(\t\022"
    "\023\n\013createdTime\030\002 \002(\t\022\r\n\005owner\030\003 \002(\t\022\r\n\005r"
    "ival\030\004 \001(\t\"(\n\010ShowInfo\022\034\n\002ri\030\001 \003(\0132\020.pub"
    "sub.RoomInfo\"\033\n\003Pos\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002("
    "\005\"H\n\010GridInfo\022\026\n\001o\030\001 \002(\0132\013.pubsub.Pos\022\026\n"
    "\001r\030\002 \002(\0132\013.pubsub.Pos\022\014\n\004grid\030\003 \002(\t", 315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "info.proto", &protobuf_RegisterTypes);
  SystemQuery::default_instance_ = new SystemQuery();
  SystemAns::default_instance_ = new SystemAns();
  RoomInfo::default_instance_ = new RoomInfo();
  ShowInfo::default_instance_ = new ShowInfo();
  Pos::default_instance_ = new Pos();
  GridInfo::default_instance_ = new GridInfo();
  SystemQuery::default_instance_->InitAsDefaultInstance();
  SystemAns::default_instance_->InitAsDefaultInstance();
  RoomInfo::default_instance_->InitAsDefaultInstance();
  ShowInfo::default_instance_->InitAsDefaultInstance();
  Pos::default_instance_->InitAsDefaultInstance();
  GridInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_info_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_info_2eproto {
  StaticDescriptorInitializer_info_2eproto() {
    protobuf_AddDesc_info_2eproto();
  }
} static_descriptor_initializer_info_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SystemQuery::kCmdFieldNumber;
const int SystemQuery::kTopicFieldNumber;
#endif  // !_MSC_VER

SystemQuery::SystemQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.SystemQuery)
}

void SystemQuery::InitAsDefaultInstance() {
}

SystemQuery::SystemQuery(const SystemQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pubsub.SystemQuery)
}

void SystemQuery::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemQuery::~SystemQuery() {
  // @@protoc_insertion_point(destructor:pubsub.SystemQuery)
  SharedDtor();
}

void SystemQuery::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmd_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (this != default_instance_) {
  }
}

void SystemQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemQuery_descriptor_;
}

const SystemQuery& SystemQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
  return *default_instance_;
}

SystemQuery* SystemQuery::default_instance_ = NULL;

SystemQuery* SystemQuery::New() const {
  return new SystemQuery;
}

void SystemQuery::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cmd_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pubsub.SystemQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cmd = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }

      // optional string topic = 3;
      case 3: {
        if (tag == 26) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pubsub.SystemQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pubsub.SystemQuery)
  return false;
#undef DO_
}

void SystemQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pubsub.SystemQuery)
  // required string cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmd(), output);
  }

  // optional string topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pubsub.SystemQuery)
}

::google::protobuf::uint8* SystemQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.SystemQuery)
  // required string cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmd(), target);
  }

  // optional string topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.SystemQuery)
  return target;
}

int SystemQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

    // optional string topic = 3;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemQuery::MergeFrom(const SystemQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemQuery::CopyFrom(const SystemQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SystemQuery::Swap(SystemQuery* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(topic_, other->topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemQuery_descriptor_;
  metadata.reflection = SystemQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemAns::kContentFieldNumber;
#endif  // !_MSC_VER

SystemAns::SystemAns()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.SystemAns)
}

void SystemAns::InitAsDefaultInstance() {
}

SystemAns::SystemAns(const SystemAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pubsub.SystemAns)
}

void SystemAns::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemAns::~SystemAns() {
  // @@protoc_insertion_point(destructor:pubsub.SystemAns)
  SharedDtor();
}

void SystemAns::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SystemAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemAns_descriptor_;
}

const SystemAns& SystemAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
  return *default_instance_;
}

SystemAns* SystemAns::default_instance_ = NULL;

SystemAns* SystemAns::New() const {
  return new SystemAns;
}

void SystemAns::Clear() {
  if (has_content()) {
    if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      content_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pubsub.SystemAns)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pubsub.SystemAns)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pubsub.SystemAns)
  return false;
#undef DO_
}

void SystemAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pubsub.SystemAns)
  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pubsub.SystemAns)
}

::google::protobuf::uint8* SystemAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.SystemAns)
  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.SystemAns)
  return target;
}

int SystemAns::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemAns::MergeFrom(const SystemAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemAns::CopyFrom(const SystemAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SystemAns::Swap(SystemAns* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemAns_descriptor_;
  metadata.reflection = SystemAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInfo::kNameFieldNumber;
const int RoomInfo::kCreatedTimeFieldNumber;
const int RoomInfo::kOwnerFieldNumber;
const int RoomInfo::kRivalFieldNumber;
#endif  // !_MSC_VER

RoomInfo::RoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.RoomInfo)
}

void RoomInfo::InitAsDefaultInstance() {
}

RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pubsub.RoomInfo)
}

void RoomInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rival_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:pubsub.RoomInfo)
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (createdtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createdtime_;
  }
  if (owner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete owner_;
  }
  if (rival_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rival_;
  }
  if (this != default_instance_) {
  }
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfo_descriptor_;
}

const RoomInfo& RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
  return *default_instance_;
}

RoomInfo* RoomInfo::default_instance_ = NULL;

RoomInfo* RoomInfo::New() const {
  return new RoomInfo;
}

void RoomInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_createdtime()) {
      if (createdtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        createdtime_->clear();
      }
    }
    if (has_owner()) {
      if (owner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        owner_->clear();
      }
    }
    if (has_rival()) {
      if (rival_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rival_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pubsub.RoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_createdTime;
        break;
      }

      // required string createdTime = 2;
      case 2: {
        if (tag == 18) {
         parse_createdTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->createdtime().data(), this->createdtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "createdtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_owner;
        break;
      }

      // required string owner = 3;
      case 3: {
        if (tag == 26) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "owner");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rival;
        break;
      }

      // optional string rival = 4;
      case 4: {
        if (tag == 34) {
         parse_rival:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rival()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rival().data(), this->rival().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rival");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pubsub.RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pubsub.RoomInfo)
  return false;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pubsub.RoomInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string createdTime = 2;
  if (has_createdtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createdtime().data(), this->createdtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createdtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->createdtime(), output);
  }

  // required string owner = 3;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->owner(), output);
  }

  // optional string rival = 4;
  if (has_rival()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rival().data(), this->rival().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rival");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rival(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pubsub.RoomInfo)
}

::google::protobuf::uint8* RoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.RoomInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string createdTime = 2;
  if (has_createdtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createdtime().data(), this->createdtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createdtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->createdtime(), target);
  }

  // required string owner = 3;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->owner(), target);
  }

  // optional string rival = 4;
  if (has_rival()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rival().data(), this->rival().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rival");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rival(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.RoomInfo)
  return target;
}

int RoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string createdTime = 2;
    if (has_createdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdtime());
    }

    // required string owner = 3;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner());
    }

    // optional string rival = 4;
    if (has_rival()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rival());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_createdtime()) {
      set_createdtime(from.createdtime());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_rival()) {
      set_rival(from.rival());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(createdtime_, other->createdtime_);
    std::swap(owner_, other->owner_);
    std::swap(rival_, other->rival_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfo_descriptor_;
  metadata.reflection = RoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowInfo::kRiFieldNumber;
#endif  // !_MSC_VER

ShowInfo::ShowInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.ShowInfo)
}

void ShowInfo::InitAsDefaultInstance() {
}

ShowInfo::ShowInfo(const ShowInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pubsub.ShowInfo)
}

void ShowInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowInfo::~ShowInfo() {
  // @@protoc_insertion_point(destructor:pubsub.ShowInfo)
  SharedDtor();
}

void ShowInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowInfo_descriptor_;
}

const ShowInfo& ShowInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
  return *default_instance_;
}

ShowInfo* ShowInfo::default_instance_ = NULL;

ShowInfo* ShowInfo::New() const {
  return new ShowInfo;
}

void ShowInfo::Clear() {
  ri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pubsub.ShowInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pubsub.RoomInfo ri = 1;
      case 1: {
        if (tag == 10) {
         parse_ri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ri;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pubsub.ShowInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pubsub.ShowInfo)
  return false;
#undef DO_
}

void ShowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pubsub.ShowInfo)
  // repeated .pubsub.RoomInfo ri = 1;
  for (int i = 0; i < this->ri_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ri(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pubsub.ShowInfo)
}

::google::protobuf::uint8* ShowInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.ShowInfo)
  // repeated .pubsub.RoomInfo ri = 1;
  for (int i = 0; i < this->ri_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ri(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.ShowInfo)
  return target;
}

int ShowInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pubsub.RoomInfo ri = 1;
  total_size += 1 * this->ri_size();
  for (int i = 0; i < this->ri_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ri(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowInfo::MergeFrom(const ShowInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ri_.MergeFrom(from.ri_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowInfo::CopyFrom(const ShowInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ri())) return false;
  return true;
}

void ShowInfo::Swap(ShowInfo* other) {
  if (other != this) {
    ri_.Swap(&other->ri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowInfo_descriptor_;
  metadata.reflection = ShowInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pos::kXFieldNumber;
const int Pos::kYFieldNumber;
#endif  // !_MSC_VER

Pos::Pos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.Pos)
}

void Pos::InitAsDefaultInstance() {
}

Pos::Pos(const Pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pubsub.Pos)
}

void Pos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pos::~Pos() {
  // @@protoc_insertion_point(destructor:pubsub.Pos)
  SharedDtor();
}

void Pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pos_descriptor_;
}

const Pos& Pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
  return *default_instance_;
}

Pos* Pos::default_instance_ = NULL;

Pos* Pos::New() const {
  return new Pos;
}

void Pos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Pos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pubsub.Pos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pubsub.Pos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pubsub.Pos)
  return false;
#undef DO_
}

void Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pubsub.Pos)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pubsub.Pos)
}

::google::protobuf::uint8* Pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.Pos)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.Pos)
  return target;
}

int Pos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pos::MergeFrom(const Pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pos::CopyFrom(const Pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Pos::Swap(Pos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pos_descriptor_;
  metadata.reflection = Pos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridInfo::kOFieldNumber;
const int GridInfo::kRFieldNumber;
const int GridInfo::kGridFieldNumber;
#endif  // !_MSC_VER

GridInfo::GridInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub.GridInfo)
}

void GridInfo::InitAsDefaultInstance() {
  o_ = const_cast< ::pubsub::Pos*>(&::pubsub::Pos::default_instance());
  r_ = const_cast< ::pubsub::Pos*>(&::pubsub::Pos::default_instance());
}

GridInfo::GridInfo(const GridInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pubsub.GridInfo)
}

void GridInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  o_ = NULL;
  r_ = NULL;
  grid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridInfo::~GridInfo() {
  // @@protoc_insertion_point(destructor:pubsub.GridInfo)
  SharedDtor();
}

void GridInfo::SharedDtor() {
  if (grid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grid_;
  }
  if (this != default_instance_) {
    delete o_;
    delete r_;
  }
}

void GridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridInfo_descriptor_;
}

const GridInfo& GridInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
  return *default_instance_;
}

GridInfo* GridInfo::default_instance_ = NULL;

GridInfo* GridInfo::New() const {
  return new GridInfo;
}

void GridInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_o()) {
      if (o_ != NULL) o_->::pubsub::Pos::Clear();
    }
    if (has_r()) {
      if (r_ != NULL) r_->::pubsub::Pos::Clear();
    }
    if (has_grid()) {
      if (grid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pubsub.GridInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pubsub.Pos o = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_o()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_r;
        break;
      }

      // required .pubsub.Pos r = 2;
      case 2: {
        if (tag == 18) {
         parse_r:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_grid;
        break;
      }

      // required string grid = 3;
      case 3: {
        if (tag == 26) {
         parse_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grid().data(), this->grid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pubsub.GridInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pubsub.GridInfo)
  return false;
#undef DO_
}

void GridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pubsub.GridInfo)
  // required .pubsub.Pos o = 1;
  if (has_o()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->o(), output);
  }

  // required .pubsub.Pos r = 2;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->r(), output);
  }

  // required string grid = 3;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grid().data(), this->grid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->grid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pubsub.GridInfo)
}

::google::protobuf::uint8* GridInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub.GridInfo)
  // required .pubsub.Pos o = 1;
  if (has_o()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->o(), target);
  }

  // required .pubsub.Pos r = 2;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->r(), target);
  }

  // required string grid = 3;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grid().data(), this->grid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->grid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub.GridInfo)
  return target;
}

int GridInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pubsub.Pos o = 1;
    if (has_o()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->o());
    }

    // required .pubsub.Pos r = 2;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r());
    }

    // required string grid = 3;
    if (has_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridInfo::MergeFrom(const GridInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_o()) {
      mutable_o()->::pubsub::Pos::MergeFrom(from.o());
    }
    if (from.has_r()) {
      mutable_r()->::pubsub::Pos::MergeFrom(from.r());
    }
    if (from.has_grid()) {
      set_grid(from.grid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridInfo::CopyFrom(const GridInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_o()) {
    if (!this->o().IsInitialized()) return false;
  }
  if (has_r()) {
    if (!this->r().IsInitialized()) return false;
  }
  return true;
}

void GridInfo::Swap(GridInfo* other) {
  if (other != this) {
    std::swap(o_, other->o_);
    std::swap(r_, other->r_);
    std::swap(grid_, other->grid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridInfo_descriptor_;
  metadata.reflection = GridInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pubsub

// @@protoc_insertion_point(global_scope)
