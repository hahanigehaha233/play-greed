// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info.proto

#ifndef PROTOBUF_info_2eproto__INCLUDED
#define PROTOBUF_info_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pubsub {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_info_2eproto();
void protobuf_AssignDesc_info_2eproto();
void protobuf_ShutdownFile_info_2eproto();

class SystemQuery;
class SystemAns;
class RoomInfo;
class ShowInfo;
class Pos;
class GridInfo;

// ===================================================================

class SystemQuery : public ::google::protobuf::Message {
 public:
  SystemQuery();
  virtual ~SystemQuery();

  SystemQuery(const SystemQuery& from);

  inline SystemQuery& operator=(const SystemQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemQuery& default_instance();

  void Swap(SystemQuery* other);

  // implements Message ----------------------------------------------

  SystemQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemQuery& from);
  void MergeFrom(const SystemQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const char* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  inline void set_allocated_cmd(::std::string* cmd);

  // optional string topic = 3;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 3;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:pubsub.SystemQuery)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_topic();
  inline void clear_has_topic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cmd_;
  ::std::string* topic_;
  friend void  protobuf_AddDesc_info_2eproto();
  friend void protobuf_AssignDesc_info_2eproto();
  friend void protobuf_ShutdownFile_info_2eproto();

  void InitAsDefaultInstance();
  static SystemQuery* default_instance_;
};
// -------------------------------------------------------------------

class SystemAns : public ::google::protobuf::Message {
 public:
  SystemAns();
  virtual ~SystemAns();

  SystemAns(const SystemAns& from);

  inline SystemAns& operator=(const SystemAns& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemAns& default_instance();

  void Swap(SystemAns* other);

  // implements Message ----------------------------------------------

  SystemAns* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemAns& from);
  void MergeFrom(const SystemAns& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:pubsub.SystemAns)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_info_2eproto();
  friend void protobuf_AssignDesc_info_2eproto();
  friend void protobuf_ShutdownFile_info_2eproto();

  void InitAsDefaultInstance();
  static SystemAns* default_instance_;
};
// -------------------------------------------------------------------

class RoomInfo : public ::google::protobuf::Message {
 public:
  RoomInfo();
  virtual ~RoomInfo();

  RoomInfo(const RoomInfo& from);

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomInfo& default_instance();

  void Swap(RoomInfo* other);

  // implements Message ----------------------------------------------

  RoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomInfo& from);
  void MergeFrom(const RoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string createdTime = 2;
  inline bool has_createdtime() const;
  inline void clear_createdtime();
  static const int kCreatedTimeFieldNumber = 2;
  inline const ::std::string& createdtime() const;
  inline void set_createdtime(const ::std::string& value);
  inline void set_createdtime(const char* value);
  inline void set_createdtime(const char* value, size_t size);
  inline ::std::string* mutable_createdtime();
  inline ::std::string* release_createdtime();
  inline void set_allocated_createdtime(::std::string* createdtime);

  // required string owner = 3;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 3;
  inline const ::std::string& owner() const;
  inline void set_owner(const ::std::string& value);
  inline void set_owner(const char* value);
  inline void set_owner(const char* value, size_t size);
  inline ::std::string* mutable_owner();
  inline ::std::string* release_owner();
  inline void set_allocated_owner(::std::string* owner);

  // optional string rival = 4;
  inline bool has_rival() const;
  inline void clear_rival();
  static const int kRivalFieldNumber = 4;
  inline const ::std::string& rival() const;
  inline void set_rival(const ::std::string& value);
  inline void set_rival(const char* value);
  inline void set_rival(const char* value, size_t size);
  inline ::std::string* mutable_rival();
  inline ::std::string* release_rival();
  inline void set_allocated_rival(::std::string* rival);

  // @@protoc_insertion_point(class_scope:pubsub.RoomInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_createdtime();
  inline void clear_has_createdtime();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_rival();
  inline void clear_has_rival();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* createdtime_;
  ::std::string* owner_;
  ::std::string* rival_;
  friend void  protobuf_AddDesc_info_2eproto();
  friend void protobuf_AssignDesc_info_2eproto();
  friend void protobuf_ShutdownFile_info_2eproto();

  void InitAsDefaultInstance();
  static RoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class ShowInfo : public ::google::protobuf::Message {
 public:
  ShowInfo();
  virtual ~ShowInfo();

  ShowInfo(const ShowInfo& from);

  inline ShowInfo& operator=(const ShowInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowInfo& default_instance();

  void Swap(ShowInfo* other);

  // implements Message ----------------------------------------------

  ShowInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowInfo& from);
  void MergeFrom(const ShowInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pubsub.RoomInfo ri = 1;
  inline int ri_size() const;
  inline void clear_ri();
  static const int kRiFieldNumber = 1;
  inline const ::pubsub::RoomInfo& ri(int index) const;
  inline ::pubsub::RoomInfo* mutable_ri(int index);
  inline ::pubsub::RoomInfo* add_ri();
  inline const ::google::protobuf::RepeatedPtrField< ::pubsub::RoomInfo >&
      ri() const;
  inline ::google::protobuf::RepeatedPtrField< ::pubsub::RoomInfo >*
      mutable_ri();

  // @@protoc_insertion_point(class_scope:pubsub.ShowInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pubsub::RoomInfo > ri_;
  friend void  protobuf_AddDesc_info_2eproto();
  friend void protobuf_AssignDesc_info_2eproto();
  friend void protobuf_ShutdownFile_info_2eproto();

  void InitAsDefaultInstance();
  static ShowInfo* default_instance_;
};
// -------------------------------------------------------------------

class Pos : public ::google::protobuf::Message {
 public:
  Pos();
  virtual ~Pos();

  Pos(const Pos& from);

  inline Pos& operator=(const Pos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pos& default_instance();

  void Swap(Pos* other);

  // implements Message ----------------------------------------------

  Pos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pos& from);
  void MergeFrom(const Pos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pubsub.Pos)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_info_2eproto();
  friend void protobuf_AssignDesc_info_2eproto();
  friend void protobuf_ShutdownFile_info_2eproto();

  void InitAsDefaultInstance();
  static Pos* default_instance_;
};
// -------------------------------------------------------------------

class GridInfo : public ::google::protobuf::Message {
 public:
  GridInfo();
  virtual ~GridInfo();

  GridInfo(const GridInfo& from);

  inline GridInfo& operator=(const GridInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridInfo& default_instance();

  void Swap(GridInfo* other);

  // implements Message ----------------------------------------------

  GridInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridInfo& from);
  void MergeFrom(const GridInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pubsub.Pos o = 1;
  inline bool has_o() const;
  inline void clear_o();
  static const int kOFieldNumber = 1;
  inline const ::pubsub::Pos& o() const;
  inline ::pubsub::Pos* mutable_o();
  inline ::pubsub::Pos* release_o();
  inline void set_allocated_o(::pubsub::Pos* o);

  // required .pubsub.Pos r = 2;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 2;
  inline const ::pubsub::Pos& r() const;
  inline ::pubsub::Pos* mutable_r();
  inline ::pubsub::Pos* release_r();
  inline void set_allocated_r(::pubsub::Pos* r);

  // required string grid = 3;
  inline bool has_grid() const;
  inline void clear_grid();
  static const int kGridFieldNumber = 3;
  inline const ::std::string& grid() const;
  inline void set_grid(const ::std::string& value);
  inline void set_grid(const char* value);
  inline void set_grid(const char* value, size_t size);
  inline ::std::string* mutable_grid();
  inline ::std::string* release_grid();
  inline void set_allocated_grid(::std::string* grid);

  // @@protoc_insertion_point(class_scope:pubsub.GridInfo)
 private:
  inline void set_has_o();
  inline void clear_has_o();
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_grid();
  inline void clear_has_grid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pubsub::Pos* o_;
  ::pubsub::Pos* r_;
  ::std::string* grid_;
  friend void  protobuf_AddDesc_info_2eproto();
  friend void protobuf_AssignDesc_info_2eproto();
  friend void protobuf_ShutdownFile_info_2eproto();

  void InitAsDefaultInstance();
  static GridInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// SystemQuery

// required string cmd = 2;
inline bool SystemQuery::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemQuery::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemQuery::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemQuery::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& SystemQuery::cmd() const {
  // @@protoc_insertion_point(field_get:pubsub.SystemQuery.cmd)
  return *cmd_;
}
inline void SystemQuery::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
  // @@protoc_insertion_point(field_set:pubsub.SystemQuery.cmd)
}
inline void SystemQuery::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
  // @@protoc_insertion_point(field_set_char:pubsub.SystemQuery.cmd)
}
inline void SystemQuery::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pubsub.SystemQuery.cmd)
}
inline ::std::string* SystemQuery::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pubsub.SystemQuery.cmd)
  return cmd_;
}
inline ::std::string* SystemQuery::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SystemQuery::set_allocated_cmd(::std::string* cmd) {
  if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmd_;
  }
  if (cmd) {
    set_has_cmd();
    cmd_ = cmd;
  } else {
    clear_has_cmd();
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pubsub.SystemQuery.cmd)
}

// optional string topic = 3;
inline bool SystemQuery::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemQuery::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemQuery::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemQuery::clear_topic() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& SystemQuery::topic() const {
  // @@protoc_insertion_point(field_get:pubsub.SystemQuery.topic)
  return *topic_;
}
inline void SystemQuery::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set:pubsub.SystemQuery.topic)
}
inline void SystemQuery::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set_char:pubsub.SystemQuery.topic)
}
inline void SystemQuery::set_topic(const char* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pubsub.SystemQuery.topic)
}
inline ::std::string* SystemQuery::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pubsub.SystemQuery.topic)
  return topic_;
}
inline ::std::string* SystemQuery::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SystemQuery::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pubsub.SystemQuery.topic)
}

// -------------------------------------------------------------------

// SystemAns

// required string content = 2;
inline bool SystemAns::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemAns::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemAns::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemAns::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SystemAns::content() const {
  // @@protoc_insertion_point(field_get:pubsub.SystemAns.content)
  return *content_;
}
inline void SystemAns::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:pubsub.SystemAns.content)
}
inline void SystemAns::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pubsub.SystemAns.content)
}
inline void SystemAns::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pubsub.SystemAns.content)
}
inline ::std::string* SystemAns::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pubsub.SystemAns.content)
  return content_;
}
inline ::std::string* SystemAns::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SystemAns::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pubsub.SystemAns.content)
}

// -------------------------------------------------------------------

// RoomInfo

// required string name = 1;
inline bool RoomInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RoomInfo::name() const {
  // @@protoc_insertion_point(field_get:pubsub.RoomInfo.name)
  return *name_;
}
inline void RoomInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pubsub.RoomInfo.name)
}
inline void RoomInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pubsub.RoomInfo.name)
}
inline void RoomInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pubsub.RoomInfo.name)
}
inline ::std::string* RoomInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pubsub.RoomInfo.name)
  return name_;
}
inline ::std::string* RoomInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pubsub.RoomInfo.name)
}

// required string createdTime = 2;
inline bool RoomInfo::has_createdtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomInfo::set_has_createdtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomInfo::clear_has_createdtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomInfo::clear_createdtime() {
  if (createdtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdtime_->clear();
  }
  clear_has_createdtime();
}
inline const ::std::string& RoomInfo::createdtime() const {
  // @@protoc_insertion_point(field_get:pubsub.RoomInfo.createdTime)
  return *createdtime_;
}
inline void RoomInfo::set_createdtime(const ::std::string& value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
  // @@protoc_insertion_point(field_set:pubsub.RoomInfo.createdTime)
}
inline void RoomInfo::set_createdtime(const char* value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:pubsub.RoomInfo.createdTime)
}
inline void RoomInfo::set_createdtime(const char* value, size_t size) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pubsub.RoomInfo.createdTime)
}
inline ::std::string* RoomInfo::mutable_createdtime() {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    createdtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pubsub.RoomInfo.createdTime)
  return createdtime_;
}
inline ::std::string* RoomInfo::release_createdtime() {
  clear_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = createdtime_;
    createdtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomInfo::set_allocated_createdtime(::std::string* createdtime) {
  if (createdtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createdtime_;
  }
  if (createdtime) {
    set_has_createdtime();
    createdtime_ = createdtime;
  } else {
    clear_has_createdtime();
    createdtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pubsub.RoomInfo.createdTime)
}

// required string owner = 3;
inline bool RoomInfo::has_owner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomInfo::set_has_owner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomInfo::clear_has_owner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomInfo::clear_owner() {
  if (owner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_->clear();
  }
  clear_has_owner();
}
inline const ::std::string& RoomInfo::owner() const {
  // @@protoc_insertion_point(field_get:pubsub.RoomInfo.owner)
  return *owner_;
}
inline void RoomInfo::set_owner(const ::std::string& value) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
  // @@protoc_insertion_point(field_set:pubsub.RoomInfo.owner)
}
inline void RoomInfo::set_owner(const char* value) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
  // @@protoc_insertion_point(field_set_char:pubsub.RoomInfo.owner)
}
inline void RoomInfo::set_owner(const char* value, size_t size) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_ = new ::std::string;
  }
  owner_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pubsub.RoomInfo.owner)
}
inline ::std::string* RoomInfo::mutable_owner() {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    owner_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pubsub.RoomInfo.owner)
  return owner_;
}
inline ::std::string* RoomInfo::release_owner() {
  clear_has_owner();
  if (owner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = owner_;
    owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomInfo::set_allocated_owner(::std::string* owner) {
  if (owner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete owner_;
  }
  if (owner) {
    set_has_owner();
    owner_ = owner;
  } else {
    clear_has_owner();
    owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pubsub.RoomInfo.owner)
}

// optional string rival = 4;
inline bool RoomInfo::has_rival() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomInfo::set_has_rival() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomInfo::clear_has_rival() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomInfo::clear_rival() {
  if (rival_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rival_->clear();
  }
  clear_has_rival();
}
inline const ::std::string& RoomInfo::rival() const {
  // @@protoc_insertion_point(field_get:pubsub.RoomInfo.rival)
  return *rival_;
}
inline void RoomInfo::set_rival(const ::std::string& value) {
  set_has_rival();
  if (rival_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rival_ = new ::std::string;
  }
  rival_->assign(value);
  // @@protoc_insertion_point(field_set:pubsub.RoomInfo.rival)
}
inline void RoomInfo::set_rival(const char* value) {
  set_has_rival();
  if (rival_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rival_ = new ::std::string;
  }
  rival_->assign(value);
  // @@protoc_insertion_point(field_set_char:pubsub.RoomInfo.rival)
}
inline void RoomInfo::set_rival(const char* value, size_t size) {
  set_has_rival();
  if (rival_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rival_ = new ::std::string;
  }
  rival_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pubsub.RoomInfo.rival)
}
inline ::std::string* RoomInfo::mutable_rival() {
  set_has_rival();
  if (rival_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rival_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pubsub.RoomInfo.rival)
  return rival_;
}
inline ::std::string* RoomInfo::release_rival() {
  clear_has_rival();
  if (rival_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rival_;
    rival_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomInfo::set_allocated_rival(::std::string* rival) {
  if (rival_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rival_;
  }
  if (rival) {
    set_has_rival();
    rival_ = rival;
  } else {
    clear_has_rival();
    rival_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pubsub.RoomInfo.rival)
}

// -------------------------------------------------------------------

// ShowInfo

// repeated .pubsub.RoomInfo ri = 1;
inline int ShowInfo::ri_size() const {
  return ri_.size();
}
inline void ShowInfo::clear_ri() {
  ri_.Clear();
}
inline const ::pubsub::RoomInfo& ShowInfo::ri(int index) const {
  // @@protoc_insertion_point(field_get:pubsub.ShowInfo.ri)
  return ri_.Get(index);
}
inline ::pubsub::RoomInfo* ShowInfo::mutable_ri(int index) {
  // @@protoc_insertion_point(field_mutable:pubsub.ShowInfo.ri)
  return ri_.Mutable(index);
}
inline ::pubsub::RoomInfo* ShowInfo::add_ri() {
  // @@protoc_insertion_point(field_add:pubsub.ShowInfo.ri)
  return ri_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pubsub::RoomInfo >&
ShowInfo::ri() const {
  // @@protoc_insertion_point(field_list:pubsub.ShowInfo.ri)
  return ri_;
}
inline ::google::protobuf::RepeatedPtrField< ::pubsub::RoomInfo >*
ShowInfo::mutable_ri() {
  // @@protoc_insertion_point(field_mutable_list:pubsub.ShowInfo.ri)
  return &ri_;
}

// -------------------------------------------------------------------

// Pos

// required int32 x = 1;
inline bool Pos::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pos::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pos::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pos::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Pos::x() const {
  // @@protoc_insertion_point(field_get:pubsub.Pos.x)
  return x_;
}
inline void Pos::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pubsub.Pos.x)
}

// required int32 y = 2;
inline bool Pos::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pos::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pos::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pos::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Pos::y() const {
  // @@protoc_insertion_point(field_get:pubsub.Pos.y)
  return y_;
}
inline void Pos::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pubsub.Pos.y)
}

// -------------------------------------------------------------------

// GridInfo

// required .pubsub.Pos o = 1;
inline bool GridInfo::has_o() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridInfo::set_has_o() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridInfo::clear_has_o() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridInfo::clear_o() {
  if (o_ != NULL) o_->::pubsub::Pos::Clear();
  clear_has_o();
}
inline const ::pubsub::Pos& GridInfo::o() const {
  // @@protoc_insertion_point(field_get:pubsub.GridInfo.o)
  return o_ != NULL ? *o_ : *default_instance_->o_;
}
inline ::pubsub::Pos* GridInfo::mutable_o() {
  set_has_o();
  if (o_ == NULL) o_ = new ::pubsub::Pos;
  // @@protoc_insertion_point(field_mutable:pubsub.GridInfo.o)
  return o_;
}
inline ::pubsub::Pos* GridInfo::release_o() {
  clear_has_o();
  ::pubsub::Pos* temp = o_;
  o_ = NULL;
  return temp;
}
inline void GridInfo::set_allocated_o(::pubsub::Pos* o) {
  delete o_;
  o_ = o;
  if (o) {
    set_has_o();
  } else {
    clear_has_o();
  }
  // @@protoc_insertion_point(field_set_allocated:pubsub.GridInfo.o)
}

// required .pubsub.Pos r = 2;
inline bool GridInfo::has_r() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridInfo::set_has_r() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridInfo::clear_has_r() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridInfo::clear_r() {
  if (r_ != NULL) r_->::pubsub::Pos::Clear();
  clear_has_r();
}
inline const ::pubsub::Pos& GridInfo::r() const {
  // @@protoc_insertion_point(field_get:pubsub.GridInfo.r)
  return r_ != NULL ? *r_ : *default_instance_->r_;
}
inline ::pubsub::Pos* GridInfo::mutable_r() {
  set_has_r();
  if (r_ == NULL) r_ = new ::pubsub::Pos;
  // @@protoc_insertion_point(field_mutable:pubsub.GridInfo.r)
  return r_;
}
inline ::pubsub::Pos* GridInfo::release_r() {
  clear_has_r();
  ::pubsub::Pos* temp = r_;
  r_ = NULL;
  return temp;
}
inline void GridInfo::set_allocated_r(::pubsub::Pos* r) {
  delete r_;
  r_ = r;
  if (r) {
    set_has_r();
  } else {
    clear_has_r();
  }
  // @@protoc_insertion_point(field_set_allocated:pubsub.GridInfo.r)
}

// required string grid = 3;
inline bool GridInfo::has_grid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridInfo::set_has_grid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridInfo::clear_has_grid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridInfo::clear_grid() {
  if (grid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grid_->clear();
  }
  clear_has_grid();
}
inline const ::std::string& GridInfo::grid() const {
  // @@protoc_insertion_point(field_get:pubsub.GridInfo.grid)
  return *grid_;
}
inline void GridInfo::set_grid(const ::std::string& value) {
  set_has_grid();
  if (grid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grid_ = new ::std::string;
  }
  grid_->assign(value);
  // @@protoc_insertion_point(field_set:pubsub.GridInfo.grid)
}
inline void GridInfo::set_grid(const char* value) {
  set_has_grid();
  if (grid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grid_ = new ::std::string;
  }
  grid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pubsub.GridInfo.grid)
}
inline void GridInfo::set_grid(const char* value, size_t size) {
  set_has_grid();
  if (grid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grid_ = new ::std::string;
  }
  grid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pubsub.GridInfo.grid)
}
inline ::std::string* GridInfo::mutable_grid() {
  set_has_grid();
  if (grid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pubsub.GridInfo.grid)
  return grid_;
}
inline ::std::string* GridInfo::release_grid() {
  clear_has_grid();
  if (grid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = grid_;
    grid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GridInfo::set_allocated_grid(::std::string* grid) {
  if (grid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grid_;
  }
  if (grid) {
    set_has_grid();
    grid_ = grid;
  } else {
    clear_has_grid();
    grid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pubsub.GridInfo.grid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pubsub

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_info_2eproto__INCLUDED
